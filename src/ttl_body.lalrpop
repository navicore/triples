grammar;

use crate::ttl_data::ParsedLine;

// Entry rule for each line
pub Line: ParsedLine = {
    <subject:RDFName> => ParsedLine::Subject(subject.0, subject.1),
    <pair:PredicateObjectPair> => ParsedLine::PredObj(pair.0.0, pair.0.1, pair.1),
    <pair:PredicateObjectPair> "." => ParsedLine::PredObjTerm(pair.0.0, pair.0.1, pair.1)
};

PredicateObjectPair: ((String, String), String) = {
    <predicate:RDFName> <object:Object> ";" => (predicate, object.to_string())
};

// RDF Name (like res:... or prop:...)
RDFName: (String, String) = {
    <ns:Ident> ":" <name:Ident> => (ns.to_string(), name.to_string())
};

// Definition of an identifier
Ident: &'input str = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>,
    UUID => <>
};

UUID: &'input str = r"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";

Object: String = {
    <quoted:r#""[^"]*""#> => {
        quoted.trim_matches('"').to_string()
    }
};
