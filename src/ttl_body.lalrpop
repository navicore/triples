grammar;

use crate::ttl_data::ParsedLine;

// Entry rule for each line
pub Line: ParsedLine = {
    <subject:RDFName> => ParsedLine::Subject(subject.to_string()),
    <subject:RDFName> "\"" <object:Ident> "\"" ";" => ParsedLine::PredObj(subject.to_string() , object.to_string()),
    <subject:RDFName> "\"" <object:Ident> "\"" ";" "." => ParsedLine::PredObjTerm(subject.to_string() , object.to_string())
};

// RDF Name (like res:... or prop:...)
RDFName: String = {
    <name:Ident> ":" <rest:Ident> => format!("{}:{}", name, rest)
};

// Definition of an identifier
Ident: &'input str = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>,
    UUID => <>
};

UUID: &'input str = r"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";
