grammar;
use crate::turtle_stream::ParsedLine;
use crate::data::Pre;
use crate::data::RdfName;

// Entry rule for each line
pub Line: ParsedLine = {
    <prefix:Prefix> => ParsedLine::Prefix(prefix.0, prefix.1),
    <isa:IsaStmt> => ParsedLine::SubjectPredObjTerm( isa.0.0,
        RdfName::new(isa.0.1), Some(Pre::new("rdf".to_string())),
        RdfName::new("type".to_string()), isa.1.0, isa.1.1),
    <subject:RDFName> => ParsedLine::Subject(subject.0,
        RdfName::new(subject.1)),
    <pair:PredicateObjectPair> Sep End => ParsedLine::PredObjTerm(pair.0.0,
        RdfName::new(pair.0.1), pair.1.0, pair.1.1),
    <pair:PredicateObjectPair> Sep => ParsedLine::PredObj(pair.0.0,
        RdfName::new(pair.0.1), pair.1.0, pair.1.1),
    <pair:PredicateObjectPair> End => ParsedLine::PredObjTerm(pair.0.0,
        RdfName::new(pair.0.1), pair.1.0, pair.1.1),

};

IsaStmt: ((Option<Pre>, String), (Option<Pre>, String)) = {
    <subject:RDFName> IsA <object:Object> End => (subject, object)
};

PredicateObjectPair: ((Option<Pre>, String), (Option<Pre>, String)) = {
    <predicate:RDFName> <object:Object> => (predicate, object)
};


pub Prefix: (Pre, RdfName) = {
    "@prefix" <ns:Namespace>":" <uri:Uri> End => (Pre::new ( ns.to_string() ), RdfName::new(uri.to_string()))
};

// Captures the namespace (like "myns:")
Namespace: &'input str = {
    <n:Ident> => n
};

// Captures the URI enclosed in angle brackets (like "<http://example.com/myns#>")
Uri: &'input str = {
    "<" <u:UriContent> ">" => u
};

UriContent: &'input str = r"https?://[^>]+";

pub Object: (Option<Pre>, String) = {
    <quoted:EscapedString> => {
        (None, quoted.trim_matches('"').to_string())
    },
    <name:RDFName> => {
        (name.0, name.1)
    }
};

// RDF Name (like res:... or prop:...)
pub RDFName: (Option<Pre>, String) = {
    <uri:Uri> => (None, uri.to_string()),
    <ns:Ident> ":" <name:Ident> => (Some(Pre::new(ns.to_string())), name.to_string()),
    <name:Ident> => (None, name.to_string()),
};

// Definition of an identifier
Ident: &'input str = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>,
    UUID => <>
};

UUID: &'input str = r"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";

EscapedString: &'input str = {
    r#""([^"\\]|\\.)*""# => <>
};

End: () = {
    r"\." => (),
};

Sep: () = {
    r";" => (),
};

IsA: () = {
    r" a" => (),
};

